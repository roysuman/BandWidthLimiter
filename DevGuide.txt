Dev- Stack

@PUSH# have to implement logic for removing limit ##poped
@PUSH# change the logic for ipc thread..... // never use boost lib-- have to do
@PUSH# for 1st packet---- some gurbage data going...... #####POPED
@PUSH# if send request wait for a free buffer cache.... don't wait.. 
       return the no of available byte can send to the kernel buffer  and return the uopdated count to the caller method. ##POPED
@PUSH# Method getPortStatus: going to sleep--- but this killing time for other threads who wats to get access of the method ##POPED
@PUSH# If a port not registered then for that port no delay--- implementation nedd to do  ###POPED

----------------------------------------------------------------------------
To DO:( PUSH )
 1. testing --- not getting desired result.( rethink the implementation )( P: HIGH2)
 2. testing--- test the ipc client server model( same box & remote box)-- solve the thred is    sue
 3. Implementation: Makefile_smart_error -- solve issues
 4. readv and writev implementation
 5. testing-- under JVM ( with multiple port limit)
 6. updating time and remaining byte at getPortStatus method, before sending the data either to 
    kernel buffer or caller method.( may be a bottleneck on geting desired delay)
 7. have to add differnt headers for BSD / suse Linux
 8. check @valgrind
 9. Gurbage value during the first read packet( client end). Send method sending some extra data when byte size< window limit ( P: HIGH1)
 10. keep man page at appro place thus man resilience execuites.
 11. Logic -- to add multiple ip port combination. (No read from file, it's causing an error 
		 due to call to libc++ read method for file read, have to implement using 
		 environment veriable. ';' separation has bug, will solve)
 12. solve execvp error-- to call a prog with run time arguments.
 --------------------------------------------------------------------------------------
 Features:
 1. execute ./resilience with appropriate command line arguments.
 2. Man page man ./resman
 3. to change the up and down limit at run time-- ipc remote client server model
 4. to store the data a buffer cache has implemented.
 5. object pool has been designed.
 6. logic for implementing thread safe-- done
 7. For more details enable Debug
 8. testing: all clent server code and sample data present at test folder
------------------------------------------------------------------------------------------

Date: 27/05/2015:
1. test for UDP socket.
2. check ipc.
3. check logic on removing limit for a port ( through ipc )
4. add multiple port limit through command line.
